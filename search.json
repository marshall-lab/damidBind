[{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"damidBind","text":"DamID (van Steensel & Henikoff, 2000; van Steensel et al, 2001) highly-sensitive means profile genome-wide association proteins chromatin living eukaryotic cells, without fixation use antibodies. Cell-type specific techniques Targeted DamID (Southall et al, 2013; Marshall et al, 2016) profile protein binding, CATaDA (Aughey et al, 2018) profile chromatin accessibility, made technique extremely powerful tool understand binding transcription factors, chromatin proteins, RNA polymerase chromatin changes development disease. Despite technique’s growing popularity adoption, formal analysis pipeline R package exists analyse explore differential DamID binding, gene transcription chromatin accessibility two conditions. damidbind package provides functionality. damidbind imports processed data DamID-seq experiments form binding bedgraphs GFF peak calls. optionally normalising data, combining peaks across replicates determining per-replicate peak occupancy, package links bound loci nearby genes. uses either limma (conventional log2 ratio DamID binding data) NOIseq (counts-based CATaDa chromatin accessibility data) identify differentially-enriched regions two conditions. package provides number visualisation tools (volcano plots, GSEA plots, Venn diagrams) downstream data exploration analysis. interactive IGV genome browser interface (powered Shiny igvShiny) allows users rapidly intuitively assess significant differentially-bound regions. Although extensive customisation options available required, much data handling damidbind taken care automatically, sensible defaults assumed. move loading raw data visualising differentially-enriched regions volcano plot browsing enriched regions interactive IGV window simple three command procedure.","code":""},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"quick-start-guide","dir":"Articles","previous_headings":"","what":"Quick start guide","title":"damidBind","text":"Using damidbind, eight easy steps:","code":"## Example code only, not run:  # Load up the data (use load_data_genes() for RNA Polymerase occupancy data) input <- load_data_peaks(     binding_profiles_path = \"path/to/binding_profile_bedgraphs\",     peaks_path = \"path/to/peak_gffs_or_beds\" ) # add quantile_norm = TRUE if appropriate  # Deterimine differential binding  (use differential_accesibility() for CATaDa chromatin accessibility data) input.diff <- differential_binding(     input,     cond = c(         \"Condition 1 identifying string in filenames\",         \"Condition 2 identifying string in filenames\"     ) )  # The result 'input.diff' is a formal S4 object. # You can see a summary by simply typing its name: input.diff  # View the proporition of differentially bound loci plot_venn(input.diff)  # Plot the differential binding, labelling associated genes with outliers plot_volcano(input.diff)  # Analyse GO enrichment in peaks associated with one condition analyse_go_enrichment(     input.diff,     direction = \"Condition 1 identifier set with differential_binding() above\" )  # View the differentially bound regions in an IGV browser window, with an interactive table of bound regions browse_igv_regions(input.diff)  # Apply additional functions on the differential binding results my_custom_function(analysisTable(input.diff))"},{"path":[]},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"sample-input-data-provided-within-the-package","dir":"Articles","previous_headings":"Sample data examples","what":"Sample input data (provided within the package)","title":"damidBind","text":"damidbind provides simple, truncated dataset package immediate testing. Owing package space, sample dataset uses Drosophila melanogaster chromosome 2L binding, used actual analysis.","code":""},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"sample-input-data-provided-online-through-a-zenodo-repository","dir":"Articles","previous_headings":"Sample data examples","what":"Sample input data (provided online through a Zenodo repository)","title":"damidBind","text":"Three previously-published sample datasets deposited Zenodo made available fully exploring features capabilities damidbind: Bsh transcription factor binding L4 L5 neurons Drosophila lamina (Xu et al, 2024) CATaDa chromatin accessibility data L4 L5 neurons (Xu et al, 2024) RNA Polymerase II occupancy Drosophila larval neural stem cells adult neurons. (Marshall & Brand, 2017) Processed files (incl. binding profiles peaks files) provided datasets.","code":""},{"path":[]},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"input-data-format","dir":"Articles","previous_headings":"Data preparation","what":"Input data format","title":"damidBind","text":"damidbind takes input: standard DamID binding datasets, score column expected log2 ratio CATaDa chromatin accessibility datasets, score column CPM (counts per million reads) similar Peaks required comparing differential gene expression via RNA Polymerase occupancy. external data files read using rtracklayer can gzip compressed uncompressed required.","code":""},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"input-data-generation","dir":"Articles","previous_headings":"Data preparation","what":"Input data generation","title":"damidBind","text":"damidbind can work either raw data files preprocessed data GenomicRanges format.","code":""},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"bedgraph-binding-accessibility-profiles","dir":"Articles","previous_headings":"Data preparation > Input data generation","what":"BEDGRAPH binding / accessibility profiles","title":"damidBind","text":"recommend damidseq_pipeline used generate input files: Using default options generate log2 ratio protein binding BEDGRAPHs Using --catada flag Dam-samples generate count-based CATaDa accesibility BEDGRAPHs","code":""},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"peak-gff-files","dir":"Articles","previous_headings":"Data preparation > Input data generation","what":"Peak GFF files","title":"damidBind","text":"recommend find_peaks used generate peak files DamID / CATaDa BEDGRAPH file replicate: cases, default options --min_quant=0.8 --unified_peaks=min recommended","code":""},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"using-damidbind","dir":"Articles","previous_headings":"","what":"Using damidBind","title":"damidBind","text":"Load library","code":"library(damidBind) ##"},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"loading-data","dir":"Articles","previous_headings":"Using damidBind","what":"Loading data","title":"damidBind","text":"small example dataset provided damidbind. dataset derived binding Bsh L4 L5 neurons Drosophila melanogaster lamina (Xu et al, 2024), truncated chromosome 2L. raw data processed using damidseq_pipeline peaks called using find_peaks (see publication Methods details). load data, need know path installed example datafiles: can use damidbind data. First, load data. two potential commands can used data loading, depending data analysed: load_data_peaks() Used load binding data associated peaks files (e.g. transcription factor binding, CATaDa accessibility) load_data_genes() Used load RNA Polymerase occupancy DamID data (proxy gene expression, per Marshall & Brand (2015)). data, peak files required (occupancy calculated gene bodies). case, ’re dealing binding transcription factor Bsh, ’ll use load_data_peaks(). transcription factor profiled two different cell types, ’d expect binding distribution similar, ’ll use quantile normalisation datasets.","code":"data_dir <- system.file(\"extdata\", package = \"damidBind\")  # Show the files present for clarity in this vignette example: files <- list.files(data_dir) print(files) ## [1] \"Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm.gatc-FDR0.01.peaks.2L.bed.gz\" ## [2] \"Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm.gatc.2L.bedgraph.gz\"          ## [3] \"Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm.gatc-FDR0.01.peaks.2L.bed.gz\" ## [4] \"Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm.gatc.2L.bedgraph.gz\"          ## [5] \"Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm.gatc-FDR0.01.peaks.2L.bed.gz\" ## [6] \"Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm.gatc.2L.bedgraph.gz\"          ## [7] \"Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm.gatc-FDR0.01.peaks.2L.bed.gz\" ## [8] \"Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm.gatc.2L.bedgraph.gz\" input.bsh <- load_data_peaks(     binding_profiles_path = data_dir,     peaks_path = data_dir,     quantile_norm = TRUE ) ## Finding genome versions ... ## Loading Ensembl genome version 'Ensembl 112 EnsDb for Drosophila melanogaster' ## loading from cache ## require(\"ensembldb\") ## Locating binding profile files ## Building binding profile dataframe from input files ... ##  - Loaded: Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm ##  - Loaded: Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm ##  - Loaded: Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm ##  - Loaded: Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm ## Applying quantile normalisation ## Locating peak files ## Calculating occupancy over peaks ## Calculating average occupancy per region ..."},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"analysing-differential-binding","dir":"Articles","previous_headings":"Using damidBind","what":"Analysing differential binding","title":"damidBind","text":"Now, ’ll determine differential binding Bsh L4 L5 neurons. input files use L4 L5 labels distinguish samples, ’s need know . , two different analysis options depending data type: differential_binding() Analyses conventional DamID data (including RNA Polymerase DamID) present log2(Dam-fusion/Dam-) ratio. standard DamID data format. limma used backend analysis. differential_accessibility() Analyses CATaDa data (Dam-chromatin accessibility data) present Counts Per Million reads (CPM) raw counts. CATaDa data (generated via e.g. damidseq_pipeline --catada) used function. Given counts nature data, NOISeq used analysis backend. input load_data_peaks() load_data_genes() feeds directly functions. , ’re dealing CATaDa data, ’ll use differential_binding() find significant, differentially-bound loci two conditions: Please note required cond parameter function, specifies filename text distinguished two separate conditions test. cond[1] must text string present , , filenames first condition test; cond[2] must text string present , , filenames second condition test. use cond_names optional, provides display names conditions downstream visualisation. Note run, differential_binding (differential_accessibility) list replicates found condition. package attempts ensure condition search overlaps avoided, please check replicates correctly assigned. functions’ output provides quick “top ten” list genes associated significant, differentially bound loci. provided quick verification analysis worked correctly, imply special value listed genes beyond . differential_binding() differential_accessibility() return DamIDResults S4 object, forms basis downstream analysis. Printing object provide simple summary analysis results. fully explore differentially bound loci, use one visualisation functions .","code":"diff.bsh <- differential_binding(     input.bsh,     cond = c(\"L4\", \"L5\"),     cond_names = c(\"L4 neurons\", \"L5 neurons\") ) ## Differential analysis setup: ## Condition 1: 'L4' (display as 'L4 neurons') ##   Found 2 replicates: ##     Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm_qnorm ##     Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm_qnorm ## Condition 2: 'L5' (display as 'L5 neurons') ##   Found 2 replicates: ##     Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm_qnorm ##     Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm_qnorm ## limma contrasts: L4-L5 ##  ## 277 loci enriched in L4 neurons ## Highest-ranked genes: ## Bka,RpS2,snoRNA:Me18S-A1576,snoRNA:Me18S-G1620,snoRNA:U14:30Ea,snoRNA:U14:30Eb,Uhg2, MICU1, oaf,Slh, CG15880,Pex12,Saf6, CG17544,Pax, CG17490,lncRNA:CR46268,RpL5,snoRNA:Psi28S-2996, haf,Rab3GAP1, CG11927,mxt, CG15425,lncRNA:CR45294,lncRNA:CR45295,lncRNA:CR45296, AIF,TBCD ##  ## 173 loci enriched in L5 neurons ## Highest-ranked genes: ## beat-Ic, Ance-3, CG11634, CG13946, Ugt36F1, Ccdc85, dmGlut,lncRNA:CR44587, CG10237, lncRNA:CR43314, eya # See a summary of the results object diff.bsh ## An object of class 'DamIDResults' ## Differentially bound regions ## Comparison: 'L4 neurons' vs 'L5 neurons' ## - 277 regions enriched in L4 neurons ## - 173 regions enriched in L5 neurons ## - 1208 total regions tested ##  ## Access results with accessor functions like analysisTable(object)."},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"visualising-data","dir":"Articles","previous_headings":"Using damidBind","what":"Visualising data","title":"damidBind","text":"downstream visualisation / data exploration functions take DamIDResults object returned analysis functions differential_binding() differential_accessibility().","code":""},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"venn-diagrams-of-differentially-bound-loci","dir":"Articles","previous_headings":"Using damidBind > Visualising data","what":"Venn diagrams of differentially bound loci","title":"damidBind","text":"Venn diagrams simple means visualising proportion loci differentially bound two tested conditions. provide , damidbind uses BioVenn generate proportional Venn diagrams two conditions. set union represents significant binding peaks fail show significant differences occupancy; exclusive regions set represent regions enriched differential binding condition. venn diagram significantly bound loci Bsh L4 L5 neurons. exclusive parts set represent regions differentially bound two conditions.","code":"plot_venn(diff.bsh)"},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"volcano-plots","dir":"Articles","previous_headings":"Using damidBind > Visualising data","what":"Volcano plots","title":"damidBind","text":"damidbind comes comprehensive volcano plot function. following gives idea capabilities.","code":""},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"the-default-volcano-plot","dir":"Articles","previous_headings":"Using damidBind > Visualising data > Volcano plots","what":"The default volcano plot","title":"damidBind","text":"simple volcano plot already gives clear picture differentially bound loci associated genes. Differential binding Bsh L4 L5 neuronal subtypes. Genes associated differentially bound peaks displayed; limitations label overlaps means outliers labelled. (Dataset chromosome 2L )","code":"plot_volcano(     diff.bsh )"},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"cleaning-up-the-gene-names","dir":"Articles","previous_headings":"Using damidBind > Visualising data > Volcano plots","what":"Cleaning up the gene names","title":"damidBind","text":"However, lot plot label space can taken generally uninformative snoRNA / tRNA genes. can optionally remove plot using clean_names=TRUE parameter, show potentially informative labels. Differential binding Bsh L4 L5 neuronal subtypes. Genes associated differentially bound peaks displayed, common, less useful, gene label classes removed. (Dataset chromosome 2L ) Already, ’s becoming lot clearer.","code":"plot_volcano(     diff.bsh,     label_config = list(clean_names = TRUE) )"},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"highlighting-gene-groups","dir":"Articles","previous_headings":"Using damidBind > Visualising data > Volcano plots","what":"Highlighting gene groups","title":"damidBind","text":", now wanted highlight genes bound Bsh, expressed L4 neurons? (data scRNA-seq data, provided Supplementary Files 2 & 3 (Xu et al, 2024)). straightforward : Differential binding Bsh L4 L5 neuronal subtypes. Genes specifically expressed L4 neurons highlighted. (Dataset chromosome 2L ) Although just truncated sample chr 2L, link subset Bsh binding potential upregulation lineage apparent. also compare genes bound Bsh expressed L5 neurons. clarity, ’ll drop gene labels plot. Differential binding Bsh L4 L5 neuronal subtypes. Genes specifically expressed subtype highlighted. (Dataset chromosome 2L ) , L5-specific Bsh peaks show clear link upregulated downregulated genes lineages.","code":"L4_only_genes <- c(\"Mp\", \"tnc\", \"grn\", \"rut\", \"mtd\", \"rdgB\", \"Octbeta2R\", \"msi\", \"Octbeta3R\", \"beat-IIIb\", \"ap\", \"Fili\", \"LRP1\", \"CG7378\", \"CG13698\", \"twit\", \"CG9336\", \"tok\", \"CG12991\", \"dpr1\", \"CG42339\", \"beat-IIb\", \"mav\", \"CG34377\", \"alpha-Man-IIb\", \"Pli\", \"CG32428\", \"osp\", \"Pka-R2\", \"CG15202\", \"CG8916\", \"CG15894\", \"side\", \"CG42258\", \"CHES-1-like\", \"SP2353\", \"CG44838\", \"Atg1\", \"Traf4\", \"DIP-beta\", \"KCNQ\", \"metro\", \"nAChRalpha1\", \"path\", \"CG10527\", \"Pde8\", \"CG30116\", \"CG7985\", \"CG1688\", \"dpr12\", \"pigs\", \"Eip63F-1\", \"CG14795\", \"2mit\", \"CG42340\", \"BicD\", \"CG18265\", \"hppy\", \"5-HT1A\", \"Chd64\", \"CG33090\", \"Dyb\", \"Btk29A\", \"Apc\", \"Rox8\", \"nAChRalpha5\", \"CG42748\", \"CG3257\", \"CG2269\", \"beat-IV\", \"CG8086\", \"glec\", \"CG31688\", \"oaf\", \"Drl-2\", \"CG8188\", \"aos\", \"CG31676\", \"REPTOR\", \"RabX4\", \"alt\", \"Pura\", \"DIP1\", \"ewg\", \"side-VIII\", \"nAChRalpha7\", \"Alh\", \"kug\", \"Ca-Ma2d\", \"bru2\", \"CG43737\", \"lncRNA:CR44024\", \"lncRNA:CR46006\", \"Had1\", \"CG3961\", \"comm\", \"Toll-6\", \"CG13685\", \"tow\", \"CG10019\")  plot_volcano(     diff.bsh,     label_config = NULL,     highlight = list(         \"L4 specific\" = L4_only_genes     ),     highlight_config = list(         size = 1.5,         label = TRUE     ) ) ## Highlight group 'L4 specific' will label: oaf,Slh, osp, CG10019, Adh,Adhr,lncRNA:CR43411,osp, oaf, CG31688, ,Btk,CG8086,mir-2b-1, Ca-Ma2d, CG14402,twit, CG42748, BicD,Sgt, lncRNA:CR45363,Traf4, bru2, lncRNA:CR45363,Traf4, bru2, CG33090,ms(2)34Fe, bru2, CG10019, CG14400,CG9336,twit, osp, CG31688,lncRNA:CR43607, Adh,Adhr,osp, CG42748,CycK,lncRNA:CR43241, beat-IIIb, nAChRalpha5, bru2, CG9336, lncRNA:CR45363,Traf4, Traf4, Traf4, nAChRalpha5,NimC4, osp, lncRNA:CR45363,Traf4, osp, beat-IIIb, CG31676, osp L5_only_genes <- c(\"Ptth\", \"Nep2\", \"kek1\", \"CG4168\", \"kek3\", \"CG6959\", \"Dtg\", \"ND-23\", \"Scp2\", \"Octalpha2R\", \"Hs6st\", \"CG16791\", \"SKIP\", \"LpR1\", \"RpL34a\", \"Ald1\", \"CG10011\", \"heph\", \"nolo\", \"Act42A\", \"Fkbp12\", \"Pkc53E\", \"AstC-R1\", \"Muc14A\", \"CG33543\", \"ChAT\", \"Act5C\", \"Ptpmeg2\", \"fabp\", \"CG31221\", \"Octbeta1R\", \"CG14669\", \"sdk\", \"Shawl\", \"side-V\", \"NaCP60E\", \"sif\", \"OtopLc\", \"side-II\", \"kuz\", \"CG42540\", \"Dscam3\", \"haf\", \"CG42673\", \"pdm3\", \"tinc\", \"CG42750\", \"sdt\", \"Nuak1\", \"Hk\", \"scrib\", \"tsr\", \"dpr20\", \"GluRIB\", \"CG43902\", \"CG44242\", \"Dscam2\", \"CG44422\", \"lncRNA:CR45312\", \"Scsalpha1\", \"Rop\", \"Con\", \"Hsc70-3\", \"dpr8\", \"eag\", \"ND-18\", \"Nrt\", \"CG17839\", \"fz\", \"CG32137\", \"Rh7\", \"Sod1\", \"CG32052\", \"dpr6\", \"Hsp67Ba\", \"axed\", \"GluRIA\", \"robo2\")   plot_volcano(     diff.bsh,     label_config = NULL,     highlight = list(         \"L4 specific\" = L4_only_genes,         \"L5 specific\" = L5_only_genes     ),     highlight_config = list(         size = 1.5,         label = FALSE     ) )"},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"browsing-differentially-bound-regions-with-an-igvshiny-browser-window","dir":"Articles","previous_headings":"Using damidBind > Visualising data","what":"Browsing differentially-bound regions with an igvShiny browser window","title":"damidBind","text":"volcano plot, useful, still put binding data genomic context. damidbind provides interactive Shiny browser window (via Shiny igvShiny), interactive table enriched loci allows quick exploration genome browser. example interface shown : table left side window can sorted clicking column headers, clicking entry move IGV browser window locus (+/- sensible buffer region). sample reps shown, together unified binding peaks simple pair tracks show loci enriched conditions.","code":"## Interactive, blocking session, uncomment to run # browse_igv_regions(diff.bsh)"},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"gsea-plots","dir":"Articles","previous_headings":"Using damidBind > Visualising data","what":"GSEA plots","title":"damidBind","text":"Gene ontology powerful means understanding biological processes may changing two sets data. Using ClusterProfiler backend, damidbind provides function analyse_go_enrichment() explore enrichment genes associated bound peaks, accessible regions, differential expression. cases, underlying gene IDs, rather gene names, used enrichment analysis. Enriched GO terms genes associated differential Bsh binding L4 neuron. Dataset chromosome 2L . return value function includes full analysis table, including names enriched loci within ontology term.","code":"go.bsh_l4 <- analyse_go_enrichment(     diff.bsh,     direction = \"L4\",     org_db = org.Dm.eg.db::org.Dm.eg.db ) ## ## 'select()' returned 1:1 mapping between keys and columns"},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"further-analysis","dir":"Articles","previous_headings":"Using damidBind","what":"Further analysis","title":"damidBind","text":"DamIDResults object returned differential_binding() differential_accessibility() contains slot named analysis (dataframe) can used additional downstream data exploration, filtering, analysis. access slot using analysisTable() accessor. first 20 lines analysisTable(diff.bsh) illustrate structure.","code":""},{"path":[]},{"path":"https://marshall-lab/damidBind/articles/damidBind_vignette.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"damidBind","text":"","code":"## R version 4.4.0 (2024-04-24) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8     ##  [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8    ##  [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] ensembldb_2.28.1        AnnotationFilter_1.28.0 GenomicFeatures_1.56.0  ##  [4] AnnotationDbi_1.66.0    Biobase_2.64.0          GenomicRanges_1.56.2    ##  [7] GenomeInfoDb_1.40.1     IRanges_2.38.1          S4Vectors_0.42.1        ## [10] BiocGenerics_0.50.0     damidBind_0.99.0        DT_0.33                 ## [13] BiocStyle_2.32.1        ##  ## loaded via a namespace (and not attached): ##   [1] later_1.4.2                 splines_4.4.0               ##   [3] BiocIO_1.14.0               bitops_1.0-9                ##   [5] ggplotify_0.1.2             filelock_1.0.3              ##   [7] tibble_3.3.0                R.oo_1.27.1                 ##   [9] polyclip_1.10-7             XML_3.99-0.18               ##  [11] lifecycle_1.0.4             httr2_1.1.2                 ##  [13] org.Dm.eg.db_3.19.1         lattice_0.22-7              ##  [15] MASS_7.3-65                 crosstalk_1.2.1             ##  [17] backports_1.5.0             NOISeq_2.48.0               ##  [19] magrittr_2.0.3              limma_3.60.6                ##  [21] sass_0.4.10                 rmarkdown_2.29              ##  [23] jquerylib_0.1.4             yaml_2.3.10                 ##  [25] plotrix_3.8-4               httpuv_1.6.16               ##  [27] cowplot_1.1.3               DBI_1.2.3                   ##  [29] RColorBrewer_1.1-3          abind_1.4-5                 ##  [31] zlibbioc_1.50.0             Rtsne_0.17                  ##  [33] purrr_1.0.4                 R.utils_2.13.0              ##  [35] ggraph_2.2.1                RCurl_1.98-1.17             ##  [37] yulab.utils_0.2.0           tweenr_2.0.3                ##  [39] rappdirs_0.3.3              GenomeInfoDbData_1.2.12     ##  [41] enrichplot_1.24.4           ggrepel_0.9.6               ##  [43] tidytree_0.4.6              pkgdown_2.1.3               ##  [45] svglite_2.2.1               codetools_0.2-20            ##  [47] DelayedArray_0.30.1         DOSE_3.30.5                 ##  [49] xml2_1.3.8                  ggforce_0.5.0               ##  [51] tidyselect_1.2.1            futile.logger_1.4.3         ##  [53] aplot_0.2.8                 UCSC.utils_1.0.0            ##  [55] farver_2.1.2                viridis_0.6.5               ##  [57] matrixStats_1.5.0           BiocFileCache_2.12.0        ##  [59] GenomicAlignments_1.40.0    jsonlite_2.0.0              ##  [61] tidygraph_1.3.1             randomcoloR_1.1.0.1         ##  [63] systemfonts_1.2.3           tools_4.4.0                 ##  [65] progress_1.2.3              treeio_1.28.0               ##  [67] Rcpp_1.1.0                  glue_1.8.0                  ##  [69] gridExtra_2.3               SparseArray_1.4.8           ##  [71] xfun_0.52                   qvalue_2.36.0               ##  [73] MatrixGenerics_1.16.0       dplyr_1.1.4                 ##  [75] withr_3.0.2                 formatR_1.14                ##  [77] BiocManager_1.30.26         fastmap_1.2.0               ##  [79] digest_0.6.37               BioVenn_1.1.3               ##  [81] mime_0.12                   R6_2.5.1                    ##  [83] gridGraphics_0.5-1          colorspace_2.1-1            ##  [85] textshaping_1.0.1           GO.db_3.19.1                ##  [87] biomaRt_2.60.1              RSQLite_2.4.1               ##  [89] R.methodsS3_1.8.2           tidyr_1.3.1                 ##  [91] generics_0.1.4              data.table_1.17.6           ##  [93] rtracklayer_1.64.0          prettyunits_1.2.0           ##  [95] graphlayouts_1.2.2          httr_1.4.7                  ##  [97] htmlwidgets_1.6.4           S4Arrays_1.4.1              ##  [99] scatterpie_0.2.5            pkgconfig_2.0.3             ## [101] gtable_0.3.6                blob_1.2.4                  ## [103] S7_0.2.0                    XVector_0.44.0              ## [105] shadowtext_0.1.5            clusterProfiler_4.12.6      ## [107] htmltools_0.5.8.1           bookdown_0.43               ## [109] fgsea_1.30.0                ProtGenerics_1.36.0         ## [111] scales_1.4.0                png_0.1-8                   ## [113] ggfun_0.1.9                 lambda.r_1.2.4              ## [115] knitr_1.50                  rstudioapi_0.17.1           ## [117] reshape2_1.4.4              rjson_0.2.21                ## [119] checkmate_2.3.2             nlme_3.1-168                ## [121] curl_6.4.0                  cachem_1.1.0                ## [123] stringr_1.5.1               BiocVersion_3.19.1          ## [125] parallel_4.4.0              restfulr_0.0.16             ## [127] desc_1.4.3                  pillar_1.11.0               ## [129] grid_4.4.0                  vctrs_0.6.5                 ## [131] promises_1.3.3              dbplyr_2.5.0                ## [133] cluster_2.1.6               xtable_1.8-4                ## [135] evaluate_1.0.4              futile.options_1.0.1        ## [137] cli_3.6.5                   compiler_4.4.0              ## [139] Rsamtools_2.20.0            rlang_1.1.6                 ## [141] crayon_1.5.3                igvShiny_1.0.5              ## [143] labeling_0.4.3              forcats_1.0.0               ## [145] plyr_1.8.9                  fs_1.6.6                    ## [147] stringi_1.8.7               viridisLite_0.4.2           ## [149] BiocParallel_1.38.0         Biostrings_2.72.1           ## [151] lazyeval_0.2.2              V8_6.0.4                    ## [153] GOSemSim_2.30.2             Matrix_1.7-3                ## [155] hms_1.1.3                   patchwork_1.3.1             ## [157] bit64_4.0.5                 ggplot2_3.5.2               ## [159] shiny_1.11.1                KEGGREST_1.44.1             ## [161] statmod_1.5.0               SummarizedExperiment_1.34.0 ## [163] AnnotationHub_3.12.0        igraph_2.1.4                ## [165] memoise_2.0.1               bslib_0.9.0                 ## [167] ggtree_3.12.0               fastmatch_1.1-6             ## [169] bit_4.6.0                   gson_0.1.0                  ## [171] ape_5.8-1"},{"path":"https://marshall-lab/damidBind/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Owen Marshall. Author, maintainer.","code":""},{"path":"https://marshall-lab/damidBind/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Marshall O (2025). damidBind: Differential Binding Expression Analysis DamID-seq Data. R package version 0.99.0, https://marshall-lab.org/damidBind.","code":"@Manual{,   title = {damidBind: Differential Binding and Expression Analysis for DamID-seq Data},   author = {Owen Marshall},   year = {2025},   note = {R package version 0.99.0},   url = {https://marshall-lab.org/damidBind}, }"},{"path":"https://marshall-lab/damidBind/index.html","id":"introduction","dir":"","previous_headings":"","what":"Differential Binding and Expression Analysis for DamID-seq Data","title":"Differential Binding and Expression Analysis for DamID-seq Data","text":"DamID highly-sensitive means profile genome-wide association proteins chromatin living eukaryotic cells, without fixation use antibodies. Cell-type specific techniques Targeted DamID profile protein binding, CATaDA profile chromatin accessibility, made technique extremely powerful tool understand binding transcription factors, chromatin proteins, RNA polymerase chromatin changes development disease. damidBind package provides simple formal analysis pipeline analyse explore differential DamID binding, gene transcription chromatin accessibility two conditions. package imports processed data DamID-seq experiments, form binding bedgraphs GFF peak calls. optionally normalising data, combining peaks across replicates determining per-replicate peak occupancy, package links bound loci nearby genes. uses either limma (conventional log2 ratio DamID binding data) NOIseq (counts-based CATaDa chromatin accessibility data) identify differentially-enriched regions two conditions. package provides number visualisation tools (volcano plots, GSEA plots via ClusterProfiler proportional Venn diagrams via BioVenn downstream data exploration analysis. powerful, interactive IGV genome browser interface (powered Shiny igvShiny) allows users rapidly intuitively assess significant differentially-bound regions genomic context. Although extensive customisation options available required, much data handling damidBind taken care automatically, sensible defaults assumed. move loading raw data visualising differentially-enriched regions volcano plot browsing enriched regions interactive IGV window simple three command procedure.","code":""},{"path":"https://marshall-lab/damidBind/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Differential Binding and Expression Analysis for DamID-seq Data","text":"install github, use:","code":"# Install Bioconductor if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(version = \"3.21\")  # Then install the damidBind package BiocManager::install(\"marshall-lab/damidBind\")"},{"path":"https://marshall-lab/damidBind/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Differential Binding and Expression Analysis for DamID-seq Data","text":"complete guide using damidBind can found damidBind vignette.","code":""},{"path":"https://marshall-lab/damidBind/index.html","id":"quick-start-guide","dir":"","previous_headings":"","what":"Quick start guide","title":"Differential Binding and Expression Analysis for DamID-seq Data","text":"Using damidBind, eight easy steps:","code":"# Load up the data (use load_data_genes() for RNA Polymerase occupancy data) input <- load_data_peaks(   binding_profiles_path = \"path/to/binding_profile_bedgraphs\",   peaks_path = \"path/to/peak_gffs_or_beds\" ) # add quantile_norm = T if appropriate  # Deterimine differential binding  (use differential_accesibility() for CATaDa chromatin accessibility data) input.diff <- differential_binding(   input,   cond = c(     \"Condition 1 identifying string in filenames\",     \"Condition 2 identifying string in filenames\"   ) )  # The result 'input.diff' is a formal S4 object. # You can see a summary by simply typing its name: input.diff  # View the proporition of differentially bound loci plot_venn(input.diff)  # Plot the differential binding, labelling associated genes with outliers plot_volcano(input.diff)  # Analyse GO enrichment in peaks associated with one condition analyse_go_enrichment(   input.diff,    direction = \"Condition 1 identifier set with differential_binding() above\" )  # View the differentially bound regions in an IGV browser window,  # with an interactive table of bound regions browse_igv_regions(input.diff)  # Apply additional functions on the differential binding results # Use the analysisTable() accessor to obtain the full analysis my_custom_function(analysisTable(input.diff))"},{"path":"https://marshall-lab/damidBind/reference/DamIDResults-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The DamIDResults Class — DamIDResults","title":"The DamIDResults Class — DamIDResults","text":"S4 class store results damidBind differential analysis, generated `differential_binding()` `differential_accessibility()`. generic plot method creates default visualisation (volcano plot) `DamIDResults` object. advanced plotting options different plot types, see specific functions `plot_volcano()`, `plot_venn()`, `analyse_go_terms()`.","code":""},{"path":"https://marshall-lab/damidBind/reference/DamIDResults-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The DamIDResults Class — DamIDResults","text":"","code":"# S4 method for class 'DamIDResults' show(object)  analysisTable(object)  # S4 method for class 'DamIDResults' analysisTable(object)  enrichedCond1(object)  # S4 method for class 'DamIDResults' enrichedCond1(object)  enrichedCond2(object)  # S4 method for class 'DamIDResults' enrichedCond2(object)  conditionNames(object)  # S4 method for class 'DamIDResults' conditionNames(object)  # S4 method for class 'DamIDResults,missing' plot(x, y, ...)"},{"path":"https://marshall-lab/damidBind/reference/DamIDResults-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The DamIDResults Class — DamIDResults","text":"object `DamIDResults` object. x `DamIDResults` object. y (Missing) used. ... Additional arguments passed `plot_volcano()`.","code":""},{"path":"https://marshall-lab/damidBind/reference/DamIDResults-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The DamIDResults Class — DamIDResults","text":"`analysisTable(object)`: returns data.frame full differential analysis. `enrichedCond1(object)`: returns data.frame regions enriched condition 1. `enrichedCond2(object)`: returns data.frame regions enriched condition 2. `conditionNames(object)`: returns named character vector mapping display names internal condition identifiers.","code":""},{"path":"https://marshall-lab/damidBind/reference/DamIDResults-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The DamIDResults Class — DamIDResults","text":"analysis data.frame containing full differential analysis table limma NOISeq. upCond1 data.frame regions significantly enriched condition 1. upCond2 data.frame regions significantly enriched condition 2. cond named character vector mapping user-friendly display names internal condition identifiers used analysis. data list containing initial input data used analysis, including occupancy data.frame metadata.","code":""},{"path":"https://marshall-lab/damidBind/reference/DamIDResults-class.html","id":"accessor-functions","dir":"Reference","previous_headings":"","what":"Accessor Functions","title":"The DamIDResults Class — DamIDResults","text":"functions provide convenient way access different data slots `DamIDResults` object.","code":""},{"path":[]},{"path":"https://marshall-lab/damidBind/reference/DamIDResults-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The DamIDResults Class — DamIDResults","text":"","code":"# Helper function to create a sample DamIDResults object for examples .generate_accessor_example_results <- function() {     analysis_df <- data.frame(         logFC = c(2, -2), P.Value = c(0.01, 0.01),         row.names = c(\"chr1:1-100\", \"chr1:101-200\")     )     new(\"DamIDResults\",         analysis = analysis_df,         upCond1 = analysis_df[1, , drop = FALSE],         upCond2 = analysis_df[2, , drop = FALSE],         cond = c(\"Condition 1\" = \"C1\", \"Condition 2\" = \"C2\"),         data = list(test_category = \"bound\")     ) } dummy_results <- .generate_accessor_example_results()  # Extract the full analysis table head(analysisTable(dummy_results)) #>              logFC P.Value #> chr1:1-100       2    0.01 #> chr1:101-200    -2    0.01  # Extract regions enriched in condition 1 head(enrichedCond1(dummy_results)) #>            logFC P.Value #> chr1:1-100     2    0.01  # Extract regions enriched in condition 2 head(enrichedCond2(dummy_results)) #>              logFC P.Value #> chr1:101-200    -2    0.01  # Get the condition names conditionNames(dummy_results) #> Condition 1 Condition 2  #>        \"C1\"        \"C2\""},{"path":"https://marshall-lab/damidBind/reference/all_overlaps_to_original.html","id":null,"dir":"Reference","previous_headings":"","what":"Find best gene overlap(s) for each query interval — all_overlaps_to_original","title":"Find best gene overlap(s) for each query interval — all_overlaps_to_original","text":"Annotates input region gene(s) overlaps. gene considered overlapping body within specified `maxgap` query region. query region overlaps multiple genes, names IDs returned comma-separated string.","code":""},{"path":"https://marshall-lab/damidBind/reference/all_overlaps_to_original.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find best gene overlap(s) for each query interval — all_overlaps_to_original","text":"","code":"all_overlaps_to_original(query, subject, maxgap = 0)"},{"path":"https://marshall-lab/damidBind/reference/all_overlaps_to_original.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find best gene overlap(s) for each query interval — all_overlaps_to_original","text":"query GRanges object containing regions annotated. subject GRanges object gene annotations. must metadata columns named `gene_name` , optionally, `gene_id`. maxgap Integer. maximum number base pairs query subject considered overlapping. Default 0 (must touching).","code":""},{"path":"https://marshall-lab/damidBind/reference/all_overlaps_to_original.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find best gene overlap(s) for each query interval — all_overlaps_to_original","text":"list containing two character vectors length `query`: genes character vector element contains comma-separated   list `gene_name` values subject regions overlapping corresponding   query region. empty string `\"\"` indicates overlap. ids character vector corresponding `gene_id` values,   `gene_id` column exists subject.","code":""},{"path":"https://marshall-lab/damidBind/reference/all_overlaps_to_original.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find best gene overlap(s) for each query interval — all_overlaps_to_original","text":"","code":"# Create a query GRanges object with regions of interest query_regions <- GenomicRanges::GRanges(\"chr1\", IRanges::IRanges(c(100, 500), width = 50))  # Create a subject GRanges object with gene annotations gene_annotations <- GenomicRanges::GRanges(     \"chr1\",     IRanges::IRanges(c(90, 200, 525), width = c(30, 50, 50)),     gene_name = c(\"geneA\", \"geneB\", \"geneC\"),     gene_id = c(\"FBgn01\", \"FBgn02\", \"FBgn03\") )  # Find overlaps (query 1 overlaps geneA; query 2 overlaps geneC) overlaps <- all_overlaps_to_original(query_regions, gene_annotations, maxgap = 0) print(overlaps) #> $genes #> [1] \"geneA\" \"geneC\" #>  #> $ids #> [1] \"FBgn01\" \"FBgn03\" #>   # With a larger gap, query 1 now also overlaps geneB overlaps_gapped <- all_overlaps_to_original(query_regions, gene_annotations, maxgap = 50) print(overlaps_gapped) #> $genes #> [1] \"geneA,geneB\" \"geneC\"       #>  #> $ids #> [1] \"FBgn01,FBgn02\" \"FBgn03\"        #>"},{"path":"https://marshall-lab/damidBind/reference/analyse_go_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Gene Ontology (GO) Enrichment Analysis for Differentially Bound/Expressed Regions — analyse_go_enrichment","title":"Perform Gene Ontology (GO) Enrichment Analysis for Differentially Bound/Expressed Regions — analyse_go_enrichment","text":"function performs Gene Ontology (GO) enrichment analysis using `clusterProfiler` either upCond1ulated upCond2ulated regions/genes identified `differential_binding()` `differential_accessibility()`. automatically extracts relevant Flybase IDs (FBgnIDs) background universe input `DamIDResults` object.","code":""},{"path":"https://marshall-lab/damidBind/reference/analyse_go_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Gene Ontology (GO) Enrichment Analysis for Differentially Bound/Expressed Regions — analyse_go_enrichment","text":"","code":"analyse_go_enrichment(   diff_results,   direction = \"cond1\",   org_db = org.Dm.eg.db::org.Dm.eg.db,   ontology = \"BP\",   pvalue_cutoff = 0.05,   qvalue_cutoff = 0.2,   plot_title = NULL,   show_category = 12,   label_format_width = 30,   save = NULL,   save_results_path = NULL,   maxGSSize = 1000,   minGSSize = 10 )"},{"path":"https://marshall-lab/damidBind/reference/analyse_go_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Gene Ontology (GO) Enrichment Analysis for Differentially Bound/Expressed Regions — analyse_go_enrichment","text":"diff_results `DamIDResults` object, returned `differential_binding()` `differential_accessibility()`. direction Character string. Specifies set genes analyse, either using condition names, \"cond1\" \"cond2\", \"\" (significantly enriched genes either direction). Default \"cond1\". org_db OrgDb object specifying organism's annotation database. Drosophila, use `org.Dm.eg.db::org.Dm.eg.db`. ontology Character string. GO ontology use: \"BP\" (Biological Process), \"MF\" (Molecular Function), \"CC\" (Cellular Component). Default \"BP\". pvalue_cutoff Numeric. Adjusted p-value cutoff significance. Default: 0.05. qvalue_cutoff Numeric. Q-value cutoff significance. Default: 0.2. plot_title Character string. Title generated dot plot. show_category Integer. Number top enriched GO categories display plot. Default: 12. label_format_width Integer. Max character length GO term labels plot. Default: 30. save List `NULL`. Controls saving plot file (dot plot). `NULL`, `FALSE`, `0`, plot saved. `list`, specifies saving parameters: filename (character): path base name output file. specified, default name \"damidBind_GSEA_dotplot\" used. format (character): File format (\"pdf\", \"svg\", \"png\"). Default \"pdf\". width (numeric): Width plot inches. Default 6. height (numeric): Height plot inches. Default 6. save_results_path Character string NULL. path provided (e.g., \"go_results.csv\"), enrichment results table saved CSV file. maxGSSize Integer. Maximum size gene sets consider. Default: 1000. minGSSize Integer. Minimum size gene sets consider. Default: 10.","code":""},{"path":"https://marshall-lab/damidBind/reference/analyse_go_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Gene Ontology (GO) Enrichment Analysis for Differentially Bound/Expressed Regions — analyse_go_enrichment","text":"list containing: enrich_go_object `enrichResult` object `clusterProfiler`. results_table Data frame enrichment results. dot_plot `ggplot` object dot plot. NULL significant enrichment found input validation fails.","code":""},{"path":"https://marshall-lab/damidBind/reference/analyse_go_enrichment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Gene Ontology (GO) Enrichment Analysis for Differentially Bound/Expressed Regions — analyse_go_enrichment","text":"function assumes `analysis` slot `diff_results` object contains `gene_ids` column. column present, processed, function return NULL. function includes internal helper `clean_gene_symbols` filters common ambiguous gene symbols (snoRNA, snRNA, tRNA) may useful GO enrichment.","code":""},{"path":"https://marshall-lab/damidBind/reference/analyse_go_enrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Gene Ontology (GO) Enrichment Analysis for Differentially Bound/Expressed Regions — analyse_go_enrichment","text":"","code":"# This example requires the 'org.Dm.eg.db' package if (requireNamespace(\"org.Dm.eg.db\", quietly = TRUE)) {     # Helper function to create a sample DamIDResults object     .generate_example_results <- function() {         # Define a mock gene object. Note: Real, mappable FlyBase IDs are         # used for the 'gene_id' column to ensure the example runs.         mock_genes_gr <- GenomicRanges::GRanges(             seqnames = S4Vectors::Rle(\"2L\", 7),             ranges = IRanges::IRanges(                 start = c(1000, 2000, 3000, 5000, 6000, 7000, 8000),                 end = c(1500, 2500, 3500, 5500, 6500, 7500, 20000000)             ),             gene_id = c(                 \"FBgn0034439\", \"FBgn0031267\", \"FBgn0051138\", \"FBgn0031265\",                 \"FBgn0004655\", \"FBgn0000251\", \"FBgn0000252\"             ),             gene_name = c(\"ap\", \"dpr1\", \"side\", \"dpr2\", \"eg\", \"bi\", \"br\")         )         data_dir <- system.file(\"extdata\", package = \"damidBind\")         loaded_data <- load_data_peaks(             binding_profiles_path = data_dir,             peaks_path = data_dir,             ensdb_genes = mock_genes_gr,             quantile_norm = TRUE         )         diff_results <- differential_binding(             loaded_data,             cond = c(\"L4\", \"L5\"),             cond_names = c(\"L4 Neurons\", \"L5 Neurons\")         )         return(diff_results)     }     diff_results <- .generate_example_results()      # Run GO Enrichment for genes enriched in the first condition (\"L4\")     # Note: with tiny sample data, this may not find significant terms.     go_results <- analyse_go_enrichment(         diff_results,         direction = \"L4\",         org_db = org.Dm.eg.db::org.Dm.eg.db     )      # Print the results table if any enrichment was found     if (!is.null(go_results)) {         print(go_results$results_table)     } } #> Locating binding profile files #> Building binding profile dataframe from input files ... #>  - Loaded: Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm #> Applying quantile normalisation #> Locating peak files #> Calculating occupancy over peaks #> Calculating average occupancy per region ... #> Differential analysis setup: #> Condition 1: 'L4' (display as 'L4 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm_qnorm #> Condition 2: 'L5' (display as 'L5 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm_qnorm #> limma contrasts: L4-L5 #>  #> 277 loci enriched in L4 Neurons #> Highest-ranked genes: #> br, br, br, br, br, br, br, br, br, br #>  #> 173 loci enriched in L5 Neurons #> Highest-ranked genes: #> br, br, br, br, br, br, br, br, br, br #> Universe of Flybase IDs is too small or invalid for enrichment analysis. Returning NULL."},{"path":"https://marshall-lab/damidBind/reference/browse_igv_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive IGV visualisation (Shiny + igvShiny) of differential regions — browse_igv_regions","title":"Interactive IGV visualisation (Shiny + igvShiny) of differential regions — browse_igv_regions","text":"Launches Shiny app embedded IGV browser interactive table listing differentially-bound regions (`differential_binding()` `differential_acccessibility()` results). Clicking region table pan IGV locus. Sample coverage region tracks loaded quantitative/annotation tracks.","code":""},{"path":"https://marshall-lab/damidBind/reference/browse_igv_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive IGV visualisation (Shiny + igvShiny) of differential regions — browse_igv_regions","text":"","code":"browse_igv_regions(   diff_results,   samples = NULL,   colour_cond1 = \"#ff6600\",   colour_cond2 = \"#2288dd\",   use_genome = NULL,   padding_width = 20000,   host = \"localhost\",   port = NULL )"},{"path":"https://marshall-lab/damidBind/reference/browse_igv_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive IGV visualisation (Shiny + igvShiny) of differential regions — browse_igv_regions","text":"diff_results `DamIDResults` object, returned `differential_binding()` `differential_accessibility()`. samples Optional character vector sample names display (default: dataset). colour_cond1, colour_cond2 Colours differentially enriched region tracks. use_genome IGV genome name (inferred peak annotations given). padding_width Width pad browser viewbox either side peak host Hostname server location (defaults localhost) port Port connection (NULL (default) port assigned Shiny)","code":""},{"path":"https://marshall-lab/damidBind/reference/browse_igv_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive IGV visualisation (Shiny + igvShiny) of differential regions — browse_igv_regions","text":"Invisibly returns Shiny app object created `shinyApp()`.","code":""},{"path":"https://marshall-lab/damidBind/reference/browse_igv_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive IGV visualisation (Shiny + igvShiny) of differential regions — browse_igv_regions","text":"","code":"# \\donttest{ # This example launches an interactive Shiny app and is not run by # automated checks. It requires an internet connection for IGV.  .generate_example_results <- function() {     mock_genes_gr <- GenomicRanges::GRanges(         seqnames = S4Vectors::Rle(\"2L\", 7),         ranges = IRanges::IRanges(             start = c(1000, 2000, 3000, 5000, 6000, 7000, 8000),             end = c(1500, 2500, 3500, 5500, 6500, 7500, 20000000)         ),         gene_id = c(\"FBgn001\", \"FBgn002\", \"FBgn003\", \"FBgn004\", \"FBgn005\", \"FBgn006\", \"FBgn007\"),         gene_name = c(\"geneA\", \"geneB\", \"geneC\", \"geneD\", \"geneE\", \"geneF\", \"LargeTestGene\")     )     data_dir <- system.file(\"extdata\", package = \"damidBind\")     loaded_data <- load_data_peaks(         binding_profiles_path = data_dir,         peaks_path = data_dir,         ensdb_genes = mock_genes_gr,         quantile_norm = TRUE     )     diff_results <- differential_binding(         loaded_data,         cond = c(\"L4\", \"L5\"),         cond_names = c(\"L4 Neurons\", \"L5 Neurons\")     )     return(diff_results) } diff_results <- .generate_example_results() #> Locating binding profile files #> Building binding profile dataframe from input files ... #>  - Loaded: Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm #> Applying quantile normalisation #> Locating peak files #> Calculating occupancy over peaks #> Calculating average occupancy per region ... #> Differential analysis setup: #> Condition 1: 'L4' (display as 'L4 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm_qnorm #> Condition 2: 'L5' (display as 'L5 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm_qnorm #> limma contrasts: L4-L5 #>  #> 277 loci enriched in L4 Neurons #> Highest-ranked genes: #> LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene #>  #> 173 loci enriched in L5 Neurons #> Highest-ranked genes: #> LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene  # Launch the interactive browser (requires network access; uncomment to run) # browse_igv_regions(diff_results) # }"},{"path":"https://marshall-lab/damidBind/reference/differential_accessibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Accessibility Analysis for CATaDa (NOISeq based) — differential_accessibility","title":"Differential Accessibility Analysis for CATaDa (NOISeq based) — differential_accessibility","text":"Setup differential analysis CATaDa chromatin accessibility experiments using NOISeq. Accepts output load_data_peaks, prepares count matrix, performs NOISeq analysis, returns differentially-accessible loci.","code":""},{"path":"https://marshall-lab/damidBind/reference/differential_accessibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Accessibility Analysis for CATaDa (NOISeq based) — differential_accessibility","text":"","code":"differential_accessibility(   data_list,   cond,   cond_names = NULL,   norm = \"n\",   q = 0.8 )"},{"path":"https://marshall-lab/damidBind/reference/differential_accessibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Accessibility Analysis for CATaDa (NOISeq based) — differential_accessibility","text":"data_list List. Output load_data_peaks. cond Vector (character). Two strings identifying two conditions compare. order matters: `cond[1]` used Condition 1, `cond[2]` Condition 2. cond_names Vector (character, optional). Custom display names two conditions outputs/plots. Order maps `cond`. norm Normalisation method passed NOISeq.  Defaults \"n\" (normalisation), \"uqua\" (upper quantile) \"tmm\" (trimmed mean M) options needed q Numeric. Q-value threshold NOISeq significance (default 0.8).","code":""},{"path":"https://marshall-lab/damidBind/reference/differential_accessibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Accessibility Analysis for CATaDa (NOISeq based) — differential_accessibility","text":"`DamIDResults` object containing results. Access slots using `@`   accessor (e.g., `results@analysis`). object includes: upCond1 data.frame regions enriched condition 1 upCond2 data.frame regions enriched condition 2 analysis data.frame full results tested regions cond named character vector mapping display names internal condition names data original `data_list` input","code":""},{"path":"https://marshall-lab/damidBind/reference/differential_accessibility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Accessibility Analysis for CATaDa (NOISeq based) — differential_accessibility","text":"","code":"# NOTE: This example uses mock counts data, as the package's sample # data is in log2-ratio format.  # Create a mock data_list with plausible count data mock_occupancy_counts <- data.frame(     name = c(\"peak1\", \"peak2\", \"peak3\"),     gene_names = c(\"GeneA\", \"GeneB\", \"GeneC\"),     gene_ids = c(\"ID_A\", \"ID_B\", \"ID_C\"),     GroupA_rep1 = c(100, 20, 50), GroupA_rep2 = c(110, 25, 45),     GroupB_rep1 = c(10, 200, 55), GroupB_rep2 = c(15, 220, 60),     row.names = c(\"peak1\", \"peak2\", \"peak3\") )  mock_data_list <- list(     occupancy = mock_occupancy_counts,     test_category = \"accessible\" )  # Run differential accessibility analysis diff_access_results <- differential_accessibility(     mock_data_list,     cond = c(\"GroupA\", \"GroupB\") ) #> Differential analysis setup: #> Condition 1: 'GroupA' (display as 'GroupA') #>   Found 2 replicates: #>     GroupA_rep1 #>     GroupA_rep2 #> Condition 2: 'GroupB' (display as 'GroupB') #>   Found 2 replicates: #>     GroupB_rep1 #>     GroupB_rep2 #> [1] \"1 differentially expressed features (up in first condition)\" #> [1] \"1 differentially expressed features (down in first condition)\" #>  #> 1 loci enriched in GroupA #> Highest-ranked genes: #> GeneA #>  #> 1 loci enriched in GroupB #> Highest-ranked genes: #> GeneB  # View the results summary diff_access_results #> An object of class 'DamIDResults' #> Differentially accessible regions #> Comparison: 'GroupA' vs 'GroupB' #> - 1 regions enriched in GroupA #> - 1 regions enriched in GroupB #> - 3 total regions tested #>  #> Access results with accessor functions like analysisTable(object)."},{"path":"https://marshall-lab/damidBind/reference/differential_binding.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential Binding/Expression Analysis (limma) — differential_binding","title":"Differential Binding/Expression Analysis (limma) — differential_binding","text":"Setup differential analysis occupancy/binding experiments using limma. Accepts output `load_data_peaks` `load_data_genes`, prepares experiment matrix, fits linear models, returns DE loci.","code":""},{"path":"https://marshall-lab/damidBind/reference/differential_binding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential Binding/Expression Analysis (limma) — differential_binding","text":"","code":"differential_binding(data_list, cond, cond_names = NULL, fdr = 0.05)"},{"path":"https://marshall-lab/damidBind/reference/differential_binding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential Binding/Expression Analysis (limma) — differential_binding","text":"data_list List. Output load_data_peaks load_data_genes. cond Vector (character). Two strings identifying two conditions compare. order matters: `cond[1]` used Condition 1, `cond[2]` Condition 2. cond_names Vector (character, optional). Custom display names two conditions outputs/plots. Order maps `cond`. fdr Numeric. FDR threshold significance (default 0.05).","code":""},{"path":"https://marshall-lab/damidBind/reference/differential_binding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential Binding/Expression Analysis (limma) — differential_binding","text":"`DamIDResults` object containing results. Access slots using   `@` accessor (e.g., `results@analysis`). object includes: upCond1 data.frame regions enriched condition 1 upCond2 data.frame regions enriched condition 2 analysis data.frame full results tested regions cond named character vector mapping display names internal condition names data original `data_list` input","code":""},{"path":"https://marshall-lab/damidBind/reference/differential_binding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential Binding/Expression Analysis (limma) — differential_binding","text":"","code":"# Create a mock GRanges object for gene annotations # This object, based on the package's unit tests, avoids network access. mock_genes_gr <- GenomicRanges::GRanges(     seqnames = S4Vectors::Rle(\"2L\", 7),     ranges = IRanges::IRanges(         start = c(1000, 2000, 3000, 5000, 6000, 7000, 8000),         end = c(1500, 2500, 3500, 5500, 6500, 7500, 20000000)     ),     strand = S4Vectors::Rle(GenomicRanges::strand(c(\"+\", \"-\", \"+\", \"+\", \"-\", \"-\", \"+\"))),     gene_id = c(\"FBgn001\", \"FBgn002\", \"FBgn003\", \"FBgn004\", \"FBgn005\", \"FBgn006\", \"FBgn007\"),     gene_name = c(\"geneA\", \"geneB\", \"geneC\", \"geneD\", \"geneE\", \"geneF\", \"LargeTestGene\") )  # Get path to sample data files included with the package data_dir <- system.file(\"extdata\", package = \"damidBind\")  # Load data loaded_data <- load_data_peaks(     binding_profiles_path = data_dir,     peaks_path = data_dir,     ensdb_genes = mock_genes_gr,     quantile_norm = TRUE ) #> Locating binding profile files #> Building binding profile dataframe from input files ... #>  - Loaded: Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm #> Applying quantile normalisation #> Locating peak files #> Calculating occupancy over peaks #> Calculating average occupancy per region ...  # Run differential binding analysis diff_results <- differential_binding(     loaded_data,     cond = c(\"L4\", \"L5\"),     cond_names = c(\"L4 Neurons\", \"L5 Neurons\") ) #> Differential analysis setup: #> Condition 1: 'L4' (display as 'L4 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm_qnorm #> Condition 2: 'L5' (display as 'L5 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm_qnorm #> limma contrasts: L4-L5 #>  #> 277 loci enriched in L4 Neurons #> Highest-ranked genes: #> LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene #>  #> 173 loci enriched in L5 Neurons #> Highest-ranked genes: #> LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene  # View the results summary diff_results #> An object of class 'DamIDResults' #> Differentially bound regions #> Comparison: 'L4 Neurons' vs 'L5 Neurons' #> - 277 regions enriched in L4 Neurons #> - 173 regions enriched in L5 Neurons #> - 1208 total regions tested #>  #> Access results with accessor functions like analysisTable(object)."},{"path":"https://marshall-lab/damidBind/reference/gene_occupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute average occupancy for each gene, using DamID binding profiles — gene_occupancy","title":"Compute average occupancy for each gene, using DamID binding profiles — gene_occupancy","text":"gene provided annotation, function calculates average log2 score taking weighted mean overlapping fragments binding data. weighting based width overlap fragment gene body.","code":""},{"path":"https://marshall-lab/damidBind/reference/gene_occupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute average occupancy for each gene, using DamID binding profiles — gene_occupancy","text":"","code":"gene_occupancy(   binding_data,   ensdb_genes = get_ensdb_genes()$genes,   buffer = 0,   BPPARAM = BiocParallel::bpparam() )"},{"path":"https://marshall-lab/damidBind/reference/gene_occupancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute average occupancy for each gene, using DamID binding profiles — gene_occupancy","text":"binding_data data.frame produced `build_dataframes()`. must contain columns 'chr', 'start', 'end', one numeric column per sample. ensdb_genes GRanges object gene annotations. custom GRanges object can provided, must contain metadata columns 'gene_name' 'gene_id'. provided, retrieved via `get_ensdb_genes`. buffer Integer. Number bases extend gene boundaries sides calculating overlaps. Default 0. BPPARAM BiocParallel parameter object parallel computation. Default: `BiocParallel::bpparam()`.","code":""},{"path":"https://marshall-lab/damidBind/reference/gene_occupancy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute average occupancy for each gene, using DamID binding profiles — gene_occupancy","text":"data.frame rows genes columns include one per sample   (containing weighted mean occupancy), plus annotation columns   gene name, number overlapping fragments ('nfrags'), gene ID.","code":""},{"path":"https://marshall-lab/damidBind/reference/gene_occupancy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute average occupancy for each gene, using DamID binding profiles — gene_occupancy","text":"","code":"# 1. Create a GRanges object for gene annotations genes_gr <- GenomicRanges::GRanges(     \"chrY\",     IRanges::IRanges(c(1000, 3000), width = 500),     gene_name = c(\"gene1\", \"gene2\"),     gene_id = c(\"ID1\", \"ID2\") )  # 2. Create mock binding data binding_df <- data.frame(     chr = \"chrY\",     start = c(950, 1200, 3100),     end = c(1050, 1300, 3200),     sampleA = c(1.5, 2.0, 0.5),     sampleB = c(1.8, 2.2, 0.4) )  # 3. Calculate average gene occupancy # Use BiocParallel::SerialParam() for deterministic execution in examples if (requireNamespace(\"BiocParallel\", quietly = TRUE)) {     gene_occ <- gene_occupancy(binding_df, genes_gr,         BPPARAM = BiocParallel::SerialParam()     )     print(gene_occ) } #> Calculating average occupancy per gene ... #>                          name nfrags  sampleA  sampleB gene_names gene_ids #> chrY:1000-1499 chrY:1000-1499      2 1.832237 2.065789      gene1      ID1 #> chrY:3000-3499 chrY:3000-3499      1 0.500000 0.400000      gene2      ID2"},{"path":"https://marshall-lab/damidBind/reference/get_ensdb_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract gene annotation from Ensembl via AnnotationHub EnsDb — get_ensdb_genes","title":"Extract gene annotation from Ensembl via AnnotationHub EnsDb — get_ensdb_genes","text":"Retrieves gene information given organism appropriate Ensembl database hosted via Bioconductor's AnnotationHub ensembldb.","code":""},{"path":"https://marshall-lab/damidBind/reference/get_ensdb_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract gene annotation from Ensembl via AnnotationHub EnsDb — get_ensdb_genes","text":"","code":"get_ensdb_genes(   organism_keyword = \"drosophila melanogaster\",   genome_build = NULL,   ensembl_version = NULL,   exclude_biotypes = c(\"transposable_element\", \"pseudogene\"),   include_gene_metadata = c(\"gene_id\", \"gene_name\") )"},{"path":"https://marshall-lab/damidBind/reference/get_ensdb_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract gene annotation from Ensembl via AnnotationHub EnsDb — get_ensdb_genes","text":"organism_keyword Character. Unique non-case-senstive string search organism (e.g., \"drosophila melanogaster\"). genome_build Optional character. Genome build identifier restrict EnsDb selection (e.g., \"BDGP6\"). ensembl_version Optional integer. Specific Ensembl version fetch. NULL, latest available version used. exclude_biotypes Character vector. Gene biotypes exclude result (default: c(\"transposable_element\", \"pseudogene\")). include_gene_metadata Character vector. Metadata columns keep gene (default: c(\"gene_id\", \"gene_name\")).","code":""},{"path":"https://marshall-lab/damidBind/reference/get_ensdb_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract gene annotation from Ensembl via AnnotationHub EnsDb — get_ensdb_genes","text":"List : genes GRanges object genes (metadata columns per argument). ensembl_version Character. Ensembl version string. genome_build Character. Genome build identifier. species Character. Latin binomial species name. common_name Character. Species common name.","code":""},{"path":"https://marshall-lab/damidBind/reference/get_ensdb_genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract gene annotation from Ensembl via AnnotationHub EnsDb — get_ensdb_genes","text":"function queries AnnotationHub EnsDb objects matching supplied organism keyword, optional filtering genome build Ensembl version. Genes matching excluded biotypes filtered . user-selected metadata fields retained genes output.","code":""},{"path":"https://marshall-lab/damidBind/reference/get_ensdb_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract gene annotation from Ensembl via AnnotationHub EnsDb — get_ensdb_genes","text":"","code":"# \\donttest{ # This example requires an internet connection and will download data. # It is wrapped in \\donttest{} so it is not run by automated checks. dm_genes <- get_ensdb_genes(     organism_keyword = \"drosophila melanogaster\",     ensembl_version = 110 ) #> Finding genome versions ... #> snapshotDate(): 2024-04-30 #> Loading Ensembl genome version 'Ensembl 110 EnsDb for Drosophila melanogaster' #> loading from cache  # View the fetched genes GRanges object dm_genes$genes #> GRanges object with 18040 ranges and 2 metadata columns: #>                             seqnames      ranges strand |            gene_id #>                                <Rle>   <IRanges>  <Rle> |        <character> #>          FBgn0259849 211000022278436   1551-2815      - |        FBgn0259849 #>          FBgn0085506 211000022278760     562-879      - |        FBgn0085506 #>          FBgn0259870 211000022279165     14-1118      - |        FBgn0259870 #>          FBgn0259817 211000022279188   1449-2180      + |        FBgn0259817 #>          FBgn0085511 211000022279264     180-614      - |        FBgn0085511 #>                  ...             ...         ...    ... .                ... #>   FBtr0472933_df_nrg            rDNA 70297-70318      + | FBtr0472933_df_nrg #>   FBtr0472934_df_nrg            rDNA 70330-70351      + | FBtr0472934_df_nrg #>          FBgn0267502            rDNA 70389-70511      + |        FBgn0267502 #>          FBgn0267503            rDNA 70540-70569      + |        FBgn0267503 #>          FBgn0267504            rDNA 70955-74924      + |        FBgn0267504 #>                             gene_name #>                           <character> #>          FBgn0259849  Su(Ste):CR42418 #>          FBgn0085506          CG40635 #>          FBgn0259870  Su(Ste):CR42439 #>          FBgn0259817    SteXh:CG42398 #>          FBgn0085511   lncRNA:CR40719 #>                  ...              ... #>   FBtr0472933_df_nrg                  #>   FBtr0472934_df_nrg                  #>          FBgn0267502 5.8SrRNA:CR45842 #>          FBgn0267503   2SrRNA:CR45843 #>          FBgn0267504  28SrRNA:CR45844 #>   ------- #>   seqinfo: 29 sequences (1 circular) from BDGP6.46 genome # }"},{"path":"https://marshall-lab/damidBind/reference/gr_occupancy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute occupancy (average) per region over a set of GRanges — gr_occupancy","title":"Compute occupancy (average) per region over a set of GRanges — gr_occupancy","text":"interval `regions` GRanges object, function finds overlapping fragments `binding_data` computes weighted mean signal values. mean weighted length overlap fragment region.","code":""},{"path":"https://marshall-lab/damidBind/reference/gr_occupancy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute occupancy (average) per region over a set of GRanges — gr_occupancy","text":"","code":"gr_occupancy(   binding_data,   regions,   buffer = 0,   BPPARAM = BiocParallel::bpparam() )"},{"path":"https://marshall-lab/damidBind/reference/gr_occupancy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute occupancy (average) per region over a set of GRanges — gr_occupancy","text":"binding_data data.frame returned `build_dataframes()`. must contain columns 'chr', 'start', 'end', followed numeric sample columns. regions GRanges object genomic intervals (e.g., reduced peaks) calculate occupancy. buffer Optional integer. Number base pairs expand interval `regions` sides calculating occupancy. Default 0. BPPARAM BiocParallel parameter object parallel computation. Default `BiocParallel::bpparam()`.","code":""},{"path":"https://marshall-lab/damidBind/reference/gr_occupancy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute occupancy (average) per region over a set of GRanges — gr_occupancy","text":"data.frame one row per region input `regions` object.   Columns include 'name', 'nfrags' (number overlapping fragments), one   column calculated weighted mean occupancy sample.","code":""},{"path":"https://marshall-lab/damidBind/reference/gr_occupancy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute occupancy (average) per region over a set of GRanges — gr_occupancy","text":"","code":"# 1. Create a set of regions (e.g., reduced peaks) regions_gr <- GenomicRanges::GRanges(\"chrX\", IRanges::IRanges(start = c(100, 500), width = 100)) S4Vectors::mcols(regions_gr)$name <- paste0(     GenomicRanges::seqnames(regions_gr), \":\",     GenomicRanges::start(regions_gr), \"-\", GenomicRanges::end(regions_gr) )  # 2. Create a mock binding data data.frame binding_df <- data.frame(     chr = \"chrX\",     start = c(90, 150, 480, 550),     end = c(110, 170, 520, 580),     sampleA = c(1.2, 0.8, 2.5, 3.0),     sampleB = c(1.0, 0.9, 2.8, 2.9) )  # 3. Calculate occupancy over the regions # Use BiocParallel::SerialParam() for deterministic execution in examples if (requireNamespace(\"BiocParallel\", quietly = TRUE)) {     occupancy_data <- gr_occupancy(binding_df, regions_gr,         BPPARAM = BiocParallel::SerialParam()     )     print(occupancy_data) } #> Calculating average occupancy per region ... #>                      name nfrags  sampleA  sampleB #> chrX:100-199 chrX:100-199      2 0.937500 0.934375 #> chrX:500-599 chrX:500-599      2 2.798077 2.859615"},{"path":"https://marshall-lab/damidBind/reference/load_data_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Load genome-wide binding data for gene expression (RNA polymerase occupancy) — load_data_genes","title":"Load genome-wide binding data for gene expression (RNA polymerase occupancy) — load_data_genes","text":"Reads RNA Polymerase DamID binding profiles either bedGraph files directly named list GRanges objects. Calculates binding occupancy summarised genes.","code":""},{"path":"https://marshall-lab/damidBind/reference/load_data_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load genome-wide binding data for gene expression (RNA polymerase occupancy) — load_data_genes","text":"","code":"load_data_genes(   binding_profiles_path = NULL,   binding_profiles = NULL,   quantile_norm = FALSE,   organism = \"drosophila melanogaster\",   ensdb_genes = NULL,   BPPARAM = BiocParallel::bpparam() )"},{"path":"https://marshall-lab/damidBind/reference/load_data_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load genome-wide binding data for gene expression (RNA polymerase occupancy) — load_data_genes","text":"binding_profiles_path Character vector directories file globs containing log2 ratio binding tracks bedGraph format. Wildcards ('*') supported. binding_profiles Named list GRanges objects representing binding profiles. quantile_norm Logical (default: FALSE) quantile-normalise across signal columns TRUE. organism Organism string (lower case) obtain genome annotation (providing custom `ensdb_genes` object) Defautls \"drosophila melanogaster\". ensdb_genes GRanges object: gene annotation. Automatically obtained `organism` NULL. BPPARAM BiocParallel function (defaults BiocParallel::bpparam())","code":""},{"path":"https://marshall-lab/damidBind/reference/load_data_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load genome-wide binding data for gene expression (RNA polymerase occupancy) — load_data_genes","text":"List elements: binding_profiles_data data.frame merged binding profiles, chr, start, end, sample columns. occupancy data.frame occupancy values summarised genes. test_category Character scalar; \"expressed\".","code":""},{"path":"https://marshall-lab/damidBind/reference/load_data_genes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load genome-wide binding data for gene expression (RNA polymerase occupancy) — load_data_genes","text":"One `binding_profiles_path` `binding_profiles` must provided. supplying GRanges lists, GRanges contain exactly one numeric metadata column representing signal, `binding_profiles` must named list, element names used sample names.","code":""},{"path":"https://marshall-lab/damidBind/reference/load_data_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load genome-wide binding data for gene expression (RNA polymerase occupancy) — load_data_genes","text":"","code":"# Create a mock GRanges object for gene annotations # This object, based on the package's unit tests, avoids network access # and includes a very long gene to ensure overlaps with sample data. mock_genes_gr <- GenomicRanges::GRanges(     seqnames = S4Vectors::Rle(\"2L\", 7),     ranges = IRanges::IRanges(         start = c(1000, 2000, 3000, 5000, 6000, 7000, 8000),         end = c(1500, 2500, 3500, 5500, 6500, 7500, 20000000)     ),     strand = S4Vectors::Rle(GenomicRanges::strand(c(\"+\", \"-\", \"+\", \"+\", \"-\", \"-\", \"+\"))),     gene_id = c(\"FBgn001\", \"FBgn002\", \"FBgn003\", \"FBgn004\", \"FBgn005\", \"FBgn006\", \"FBgn007\"),     gene_name = c(\"geneA\", \"geneB\", \"geneC\", \"geneD\", \"geneE\", \"geneF\", \"LargeTestGene\") )  # Get path to sample data files included with the package data_dir <- system.file(\"extdata\", package = \"damidBind\")  # Run loading function using sample files and mock gene annotations # This calculates occupancy over genes instead of peaks. loaded_data_genes <- load_data_genes(     binding_profiles_path = data_dir,     ensdb_genes = mock_genes_gr,     quantile_norm = FALSE ) #> Locating binding profile files #> Building binding profile dataframe from input files ... #>  - Loaded: Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm #> Calculating average occupancy per gene ...  # View the head of the occupancy table head(loaded_data_genes$occupancy) #>                      name nfrags Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm #> 2L:1000-1500 2L:1000-1500      4                             0.000000 #> 2L:2000-2500 2L:2000-2500      4                             0.000000 #> 2L:3000-3500 2L:3000-3500      4                             0.000000 #> 2L:5000-5500 2L:5000-5500      4                             1.465469 #> 2L:6000-6500 2L:6000-6500      2                             1.515389 #> 2L:7000-7500 2L:7000-7500      1                            -0.130000 #>              Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm #> 2L:1000-1500                             0.000000 #> 2L:2000-2500                             0.000000 #> 2L:3000-3500                             0.000000 #> 2L:5000-5500                             1.444371 #> 2L:6000-6500                             1.791916 #> 2L:7000-7500                            -0.110000 #>              Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm #> 2L:1000-1500                            0.0000000 #> 2L:2000-2500                            0.0000000 #> 2L:3000-3500                            0.0000000 #> 2L:5000-5500                            1.2137325 #> 2L:6000-6500                            0.2373453 #> 2L:7000-7500                           -0.0300000 #>              Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm gene_names gene_ids #> 2L:1000-1500                            0.0000000      geneA  FBgn001 #> 2L:2000-2500                            0.0000000      geneB  FBgn002 #> 2L:3000-3500                            0.0000000      geneC  FBgn003 #> 2L:5000-5500                            0.8943313      geneD  FBgn004 #> 2L:6000-6500                            0.6489222      geneE  FBgn005 #> 2L:7000-7500                           -0.0900000      geneF  FBgn006"},{"path":"https://marshall-lab/damidBind/reference/load_data_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Load genome-wide binding data and associated peak files or GRanges objects — load_data_peaks","title":"Load genome-wide binding data and associated peak files or GRanges objects — load_data_peaks","text":"Reads DamID-seq log2 ratio binding data either bedGraph files directly list GRanges objects, associated peak regions either GFF/bed files list GRanges objects. function suitable transcription factor binding analyses. peak discovery, use external peak caller (e.g. 'find_peaks').","code":""},{"path":"https://marshall-lab/damidBind/reference/load_data_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load genome-wide binding data and associated peak files or GRanges objects — load_data_peaks","text":"","code":"load_data_peaks(   binding_profiles_path = NULL,   peaks_path = NULL,   binding_profiles = NULL,   peaks = NULL,   quantile_norm = FALSE,   organism = \"drosophila melanogaster\",   ensdb_genes = NULL,   BPPARAM = BiocParallel::bpparam() )"},{"path":"https://marshall-lab/damidBind/reference/load_data_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load genome-wide binding data and associated peak files or GRanges objects — load_data_peaks","text":"binding_profiles_path Character vector. Path(s) directories file globs containing log2 ratio binding tracks bedGraph format. Wildcards ('*') supported. peaks_path Character vector. Path(s) directories file globs containing peak calls GFF BED format. binding_profiles List GRanges objects binding profiles, one per sample. peaks List GRanges objects representing peak regions. quantile_norm Logical (default: FALSE). TRUE, quantile-normalise signal columns across datasets. organism Organism string (lower case) obtain genome annotation (providing custom `ensdb_genes` object)  Defautls \"drosophila melanogaster\". ensdb_genes GRanges object: gene annotation. Automatically obtained `organism` NULL. BPPARAM BiocParallel function (defaults BiocParallel::bpparam())","code":""},{"path":"https://marshall-lab/damidBind/reference/load_data_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load genome-wide binding data and associated peak files or GRanges objects — load_data_peaks","text":"list components: binding_profiles_data data.frame: Signal matrix regions, columns chr, start, end, sample columns. peaks list(GRanges): loaded peak regions input files directly supplied. pr GRanges: Reduced (union) peak regions across samples. occupancy data.frame: Binding values summarised reduced peaks, overlap annotations. test_category Character scalar; \"bound\".","code":""},{"path":"https://marshall-lab/damidBind/reference/load_data_peaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load genome-wide binding data and associated peak files or GRanges objects — load_data_peaks","text":"One `binding_profiles_path` `binding_profiles` must provided. Similarly, one `peaks_path` `peaks` must provided. supplying GRanges lists, GRanges contain exactly one numeric metadata column representing binding signal, GRanges supplied named list, element names used sample names.","code":""},{"path":"https://marshall-lab/damidBind/reference/load_data_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load genome-wide binding data and associated peak files or GRanges objects — load_data_peaks","text":"","code":"# Create a mock GRanges object for gene annotation # This object, based on the package's unit tests, avoids network access # and includes a very long gene to ensure overlaps with sample data. mock_genes_gr <- GenomicRanges::GRanges(     seqnames = S4Vectors::Rle(\"2L\", 7),     ranges = IRanges::IRanges(         start = c(1000, 2000, 3000, 5000, 6000, 7000, 8000),         end = c(1500, 2500, 3500, 5500, 6500, 7500, 20000000)     ),     strand = S4Vectors::Rle(GenomicRanges::strand(c(\"+\", \"-\", \"+\", \"+\", \"-\", \"-\", \"+\"))),     gene_id = c(\"FBgn001\", \"FBgn002\", \"FBgn003\", \"FBgn004\", \"FBgn005\", \"FBgn006\", \"FBgn007\"),     gene_name = c(\"geneA\", \"geneB\", \"geneC\", \"geneD\", \"geneE\", \"geneF\", \"LargeTestGene\") )  # Get path to sample data files included with the package data_dir <- system.file(\"extdata\", package = \"damidBind\")  # Run loading function using sample files and mock gene annotations loaded_data <- load_data_peaks(     binding_profiles_path = data_dir,     peaks_path = data_dir,     ensdb_genes = mock_genes_gr,     quantile_norm = TRUE ) #> Locating binding profile files #> Building binding profile dataframe from input files ... #>  - Loaded: Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm #> Applying quantile normalisation #> Locating peak files #> Calculating occupancy over peaks #> Calculating average occupancy per region ...  # View the structure of the output str(loaded_data, max.level = 1) #> List of 5 #>  $ binding_profiles_data:'data.frame':\t62464 obs. of  7 variables: #>  $ peaks                :List of 4 #>  $ pr                   :Formal class 'GRanges' [package \"GenomicRanges\"] with 7 slots #>  $ occupancy            :'data.frame':\t1208 obs. of  8 variables: #>  $ test_category        : chr \"bound\""},{"path":"https://marshall-lab/damidBind/reference/plot_venn.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Proportional Venn Diagram for differential binding analysis — plot_venn","title":"Draw Proportional Venn Diagram for differential binding analysis — plot_venn","text":"Generates two-set Venn/proportional diagram summarising results differential binding analysis. set union represents significant binding peaks fail show significant differences occupancy; exclusive regions set represent regions enriched differential binding condition. Note regions can bound conditions, still show differential occupancy.","code":""},{"path":"https://marshall-lab/damidBind/reference/plot_venn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Proportional Venn Diagram for differential binding analysis — plot_venn","text":"","code":"plot_venn(   diff_results,   title = \"Enriched binding at loci\",   subtitle = \"\",   set_labels = NULL,   filename = NULL,   font = \"sans\",   format = c(\"pdf\", \"svg\"),   region_colours = c(\"#FFA500\", \"#2288DD\", \"#CCCCCC\") )"},{"path":"https://marshall-lab/damidBind/reference/plot_venn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Proportional Venn Diagram for differential binding analysis — plot_venn","text":"diff_results `DamIDResults` object, returned `differential_binding()` `differential_accessibility()`. title Plot title use. subtitle Subtitle use (default empty). set_labels Character vector length 2. Names two sets/circles (defaults analysis condition names). filename Character. Path save diagram, NULL. font Font name use (default \"sans\") format Character. Output plot format, \"pdf\" \"svg\" (default \"pdf\"). region_colours Character vector length 2 3. Fill colours set region (default: c(\"#FFA500\", \"#2288DD\", \"#CCCCCC\")).","code":""},{"path":"https://marshall-lab/damidBind/reference/plot_venn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Proportional Venn Diagram for differential binding analysis — plot_venn","text":"function called generating plot. invisibly returns `NULL`.","code":""},{"path":"https://marshall-lab/damidBind/reference/plot_venn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Proportional Venn Diagram for differential binding analysis — plot_venn","text":"","code":"# Helper function to create a sample DamIDResults object .generate_example_results <- function() {     mock_genes_gr <- GenomicRanges::GRanges(         seqnames = S4Vectors::Rle(\"2L\", 7),         ranges = IRanges::IRanges(             start = c(1000, 2000, 3000, 5000, 6000, 7000, 8000),             end = c(1500, 2500, 3500, 5500, 6500, 7500, 20000000)         ),         gene_id = c(\"FBgn001\", \"FBgn002\", \"FBgn003\", \"FBgn004\", \"FBgn005\", \"FBgn006\", \"FBgn007\"),         gene_name = c(\"geneA\", \"geneB\", \"geneC\", \"geneD\", \"geneE\", \"geneF\", \"LargeTestGene\")     )     data_dir <- system.file(\"extdata\", package = \"damidBind\")     loaded_data <- load_data_peaks(         binding_profiles_path = data_dir,         peaks_path = data_dir,         ensdb_genes = mock_genes_gr,         quantile_norm = TRUE     )     diff_results <- differential_binding(         loaded_data,         cond = c(\"L4\", \"L5\"),         cond_names = c(\"L4 Neurons\", \"L5 Neurons\")     )     return(diff_results) } diff_results <- .generate_example_results() #> Locating binding profile files #> Building binding profile dataframe from input files ... #>  - Loaded: Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm #> Applying quantile normalisation #> Locating peak files #> Calculating occupancy over peaks #> Calculating average occupancy per region ... #> Differential analysis setup: #> Condition 1: 'L4' (display as 'L4 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm_qnorm #> Condition 2: 'L5' (display as 'L5 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm_qnorm #> limma contrasts: L4-L5 #>  #> 277 loci enriched in L4 Neurons #> Highest-ranked genes: #> LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene #>  #> 173 loci enriched in L5 Neurons #> Highest-ranked genes: #> LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene  # Generate the Venn diagram plot_venn(diff_results)"},{"path":"https://marshall-lab/damidBind/reference/plot_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano Plot of Differentially Bound/Expressed Loci — plot_volcano","title":"Volcano Plot of Differentially Bound/Expressed Loci — plot_volcano","text":"Plots volcano plot optional layered highlights overlays, given results `differential_binding()` `differential_analysis()`.","code":""},{"path":"https://marshall-lab/damidBind/reference/plot_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Plot of Differentially Bound/Expressed Loci — plot_volcano","text":"","code":"plot_volcano(   diff_results,   plot_config = list(),   label_config = list(),   highlight = NULL,   highlight_config = list(),   save = NULL )"},{"path":"https://marshall-lab/damidBind/reference/plot_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano Plot of Differentially Bound/Expressed Loci — plot_volcano","text":"diff_results `DamIDResults` object, returned `differential_binding()` `differential_accessibility()`. plot_config List. Names override plot details (title, axes, size, colours, etc); see details. title, xlab, ylab (character) ystat (character): column name `diff_results@analysis`     use y-axis (e.g., \"minuslogp\" \"B\"). Default \"B\". base_size (integer): ggplot theme base font size. sig_colour, nonsig_colour (colours) sig_alpha, sig_size: alpha size significant points. nonsig_alpha, nonsig_size: alpha size non-significant points. label_config List. Fine-grained label controls; missing `NULL`, labels added (see details). genes: character vector restrict labels subset (default: label significant). label_size: label size (numeric). clean_names: logical; `TRUE`, applies regex filtering labels. names_clean, names_clean_extra: regex exclude labels     clean_names `TRUE`. max_overlaps: integer; maximum ggrepel overlaps. highlight List. simple list element character vector genes/loci highlight. element list correspond separate highlight group. `NULL`, highlight overlays drawn. highlight_config List. Additional highlight configuration options, applied consistently across highlight groups. missing `NULL`, defaults used. alpha: Numeric; transparency highlight points (default: 1). size: Numeric; size highlight points (default: 2). label: Logical; `TRUE`, labels added highlight groups (default: `FALSE`). colour: list colours, element corresponds highlight     group `highlight` list. specified enough colours     provided, default hue palette used. label_size: Numeric; label size (default: 4). max_overlaps: Integer; maximum ggrepel overlaps highlight labels (default: 10). save List `NULL`. Controls saving plot file. `NULL`, `FALSE`, `0`, plot saved. `list`, specifies saving parameters: filename (character): path base name output file     (e.g., \"my_volcano_plot\"). specified, default used. format (character): File format (\"pdf\", \"svg\", \"png\").     Default \"pdf\". width (numeric): Width plot inches. Default 5. height (numeric): Height plot inches. Default 4.","code":""},{"path":"https://marshall-lab/damidBind/reference/plot_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano Plot of Differentially Bound/Expressed Loci — plot_volcano","text":"`ggplot` object","code":""},{"path":"https://marshall-lab/damidBind/reference/plot_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volcano Plot of Differentially Bound/Expressed Loci — plot_volcano","text":"","code":"# Helper function to create a sample DamIDResults object .generate_example_results <- function() {     mock_genes_gr <- GenomicRanges::GRanges(         seqnames = S4Vectors::Rle(\"2L\", 7),         ranges = IRanges::IRanges(             start = c(1000, 2000, 3000, 5000, 6000, 7000, 8000),             end = c(1500, 2500, 3500, 5500, 6500, 7500, 20000000)         ),         gene_id = c(\"FBgn001\", \"FBgn002\", \"FBgn003\", \"FBgn004\", \"FBgn005\", \"FBgn006\", \"FBgn007\"),         gene_name = c(\"ap\", \"dpr1\", \"side\", \"mav\", \"geneE\", \"geneF\", \"LargeTestGene\")     )     data_dir <- system.file(\"extdata\", package = \"damidBind\")     loaded_data <- load_data_peaks(         binding_profiles_path = data_dir,         peaks_path = data_dir,         ensdb_genes = mock_genes_gr,         quantile_norm = TRUE     )     diff_results <- differential_binding(         loaded_data,         cond = c(\"L4\", \"L5\"),         cond_names = c(\"L4 Neurons\", \"L5 Neurons\")     )     return(diff_results) } diff_results <- .generate_example_results() #> Locating binding profile files #> Building binding profile dataframe from input files ... #>  - Loaded: Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm #>  - Loaded: Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm #> Applying quantile normalisation #> Locating peak files #> Calculating occupancy over peaks #> Calculating average occupancy per region ... #> Differential analysis setup: #> Condition 1: 'L4' (display as 'L4 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L4_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L4_r2-ext300-vs-Dam.kde-norm_qnorm #> Condition 2: 'L5' (display as 'L5 Neurons') #>   Found 2 replicates: #>     Bsh_Dam_L5_r1-ext300-vs-Dam.kde-norm_qnorm #>     Bsh_Dam_L5_r2-ext300-vs-Dam.kde-norm_qnorm #> limma contrasts: L4-L5 #>  #> 277 loci enriched in L4 Neurons #> Highest-ranked genes: #> LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene #>  #> 173 loci enriched in L5 Neurons #> Highest-ranked genes: #> LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene, LargeTestGene  # Generate a default volcano plot plot_volcano(diff_results) #> Warning: ggrepel: 354 unlabeled data points (too many overlaps). Consider increasing max.overlaps   # Generate a plot with a highlighted gene group, but no other labels L4_genes_to_highlight <- c(\"ap\", \"dpr1\", \"side\", \"mav\") plot_volcano(     diff_results,     label_config = NULL,     highlight = list(\"Key L4 Genes\" = L4_genes_to_highlight) )"},{"path":"https://marshall-lab/damidBind/reference/quantile_normalisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile Normalisation — quantile_normalisation","title":"Quantile Normalisation — quantile_normalisation","text":"Performs quantile normalisation numeric matrix native R, matching algorithm used `preprocessCore` (including tie-handling rule).","code":""},{"path":"https://marshall-lab/damidBind/reference/quantile_normalisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile Normalisation — quantile_normalisation","text":"","code":"quantile_normalisation(x)"},{"path":"https://marshall-lab/damidBind/reference/quantile_normalisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile Normalisation — quantile_normalisation","text":"x numeric matrix; rows features (e.g., genes), columns samples/arrays.","code":""},{"path":"https://marshall-lab/damidBind/reference/quantile_normalisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile Normalisation — quantile_normalisation","text":"numeric matrix dimensions x, quantile normalised.","code":""},{"path":"https://marshall-lab/damidBind/reference/quantile_normalisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantile Normalisation — quantile_normalisation","text":"function native R implementation standard quantile normalisation algorithm. designed drop-replacement , produce identical results , function name `preprocessCore` package. native R version provided within `damidBind` avoid known issues `preprocessCore` package can lead errors cause R crash Linux systems due conflicts OpenMP /BLAS/LAPACK library configurations. providing native R implementation, `damidBind` ensures works reliably users without requiring recompile dependencies manage system environment variables. implementation exactly mirrors behaviour `preprocessCore` library’s classic quantile normalisation, including specific handling ties: average ranks computed ties, fractional part rank greater 0.4, output value average two adjacent quantile means; otherwise, lower (floored) quantile mean used. function stops NA, Inf, NaN values present x.","code":""},{"path":"https://marshall-lab/damidBind/reference/quantile_normalisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile Normalisation — quantile_normalisation","text":"","code":"set.seed(1) x <- matrix(rnorm(9), nrow = 3) quantile_normalisation(x) #>            [,1]       [,2]       [,3] #> [1,]  0.0929451  0.8390829 -0.3895560 #> [2,]  0.8390829  0.0929451  0.8390829 #> [3,] -0.3895560 -0.3895560  0.0929451"},{"path":"https://marshall-lab/damidBind/reference/reduce_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce a list of GRanges to unique, non-overlapping regions — reduce_regions","title":"Reduce a list of GRanges to unique, non-overlapping regions — reduce_regions","text":"Takes list GRanges objects (e.g., peak sets multiple samples), combines , merges overlapping adjacent regions single, minimal set genomic intervals.","code":""},{"path":"https://marshall-lab/damidBind/reference/reduce_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce a list of GRanges to unique, non-overlapping regions — reduce_regions","text":"","code":"reduce_regions(peaks)"},{"path":"https://marshall-lab/damidBind/reference/reduce_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce a list of GRanges to unique, non-overlapping regions — reduce_regions","text":"peaks list GRanges objects.","code":""},{"path":"https://marshall-lab/damidBind/reference/reduce_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce a list of GRanges to unique, non-overlapping regions — reduce_regions","text":"GRanges object containing reduced (union) regions,   `name` metadata column format \"chr:start-end\".","code":""},{"path":"https://marshall-lab/damidBind/reference/reduce_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce a list of GRanges to unique, non-overlapping regions — reduce_regions","text":"","code":"# Create a list of GRanges objects with overlapping regions gr1 <- GenomicRanges::GRanges(\"chr1\", IRanges::IRanges(c(100, 200), width = 50)) gr2 <- GenomicRanges::GRanges(\"chr1\", IRanges::IRanges(c(120, 300), width = 50)) gr_list <- list(gr1, gr2)  # Reduce the list to a single set of non-overlapping regions reduced <- reduce_regions(gr_list) print(reduced) #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |         name #>          <Rle> <IRanges>  <Rle> |  <character> #>   [1]     chr1   100-169      * | chr1:100-169 #>   [2]     chr1   200-249      * | chr1:200-249 #>   [3]     chr1   300-349      * | chr1:300-349 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths # The result combines overlapping regions [100-149] and [120-169] into [100-169]."},{"path":"https://marshall-lab/damidBind/news/index.html","id":"damidbind-0990","dir":"Changelog","previous_headings":"","what":"damidBind 0.99.0","title":"damidBind 0.99.0","text":"Initial submission Bioconductor.","code":""}]
